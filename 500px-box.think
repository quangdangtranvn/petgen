// render-box.think - Complete 3D Box Renderer
// Using all .think syntax features and lib components

?? === Think Configuration Block ===
config {
    frameRate: 60,
    canvasID: "think-canvas",
    bgColor: [0.1, 0.1, 0.1],
    edgeColor: "#3a86ff",
    useFullscreen: false ?bool
}

?? === Core Math Library ===
lib math {
    ? Constants
    PI: 3.141592653589793,
    DEG2RAD: \$deg) -> deg * (PI / 180),
    RAD2DEG: \$rad) -> rad * (180 / PI),

    ? Matrix Operations
    mat4: {
        identity: \-> [
            [1, 0, 0, 0],
            [0, 1, 0, 0],
            [0, 0, 1, 0],
            [0, 0, 0, 1]
        ],

        multiply: \$a, b) -> [
            [a[0][0]*b[0][0] + a[0][1]*b[1][0] + a[0][2]*b[2][0] + a[0][3]*b[3][0],
             a[0][0]*b[0][1] + a[0][1]*b[1][1] + a[0][2]*b[2][1] + a[0][3]*b[3][1],
             a[0][0]*b[0][2] + a[0][1]*b[1][2] + a[0][2]*b[2][2] + a[0][3]*b[3][2],
             a[0][0]*b[0][3] + a[0][1]*b[1][3] + a[0][2]*b[2][3] + a[0][3]*b[3][3]],
            [a[1][0]*b[0][0] + a[1][1]*b[1][0] + a[1][2]*b[2][0] + a[1][3]*b[3][0],
             a[1][0]*b[0][1] + a[1][1]*b[1][1] + a[1][2]*b[2][1] + a[1][3]*b[3][1],
             a[1][0]*b[0][2] + a[1][1]*b[1][2] + a[1][2]*b[2][2] + a[1][3]*b[3][2],
             a[1][0]*b[0][3] + a[1][1]*b[1][3] + a[1][2]*b[2][3] + a[1][3]*b[3][3]],
            [a[2][0]*b[0][0] + a[2][1]*b[1][0] + a[2][2]*b[2][0] + a[2][3]*b[3][0],
             a[2][0]*b[0][1] + a[2][1]*b[1][1] + a[2][2]*b[2][1] + a[2][3]*b[3][1],
             a[2][0]*b[0][2] + a[2][1]*b[1][2] + a[2][2]*b[2][2] + a[2][3]*b[3][2],
             a[2][0]*b[0][3] + a[2][1]*b[1][3] + a[2][2]*b[2][3] + a[2][3]*b[3][3]],
            [a[3][0]*b[0][0] + a[3][1]*b[1][0] + a[3][2]*b[2][0] + a[3][3]*b[3][0],
             a[3][0]*b[0][1] + a[3][1]*b[1][1] + a[3][2]*b[2][1] + a[3][3]*b[3][1],
             a[3][0]*b[0][2] + a[3][1]*b[1][2] + a[3][2]*b[2][2] + a[3][3]*b[3][2],
             a[3][0]*b[0][3] + a[3][1]*b[1][3] + a[3][2]*b[2][3] + a[3][3]*b[3][3]]
        ],

        rotationX: \$angle) -> {
            c = cos(angle)
            s = sin(angle)
            return [
                [1, 0, 0, 0],
                [0, c,-s, 0],
                [0, s, c, 0],
                [0, 0, 0, 1]
            ]
        },

        rotationY: \$angle) -> {
            c = cos(angle)
            s = sin(angle)
            return [
                [c, 0, s, 0],
                [0, 1, 0, 0],
                [-s,0, c, 0],
                [0, 0, 0, 1]
            ]
        },

        rotationZ: \$angle) -> {
            c = cos(angle)
            s = sin(angle)
            return [
                [c,-s, 0, 0],
                [s, c, 0, 0],
                [0, 0, 1, 0],
                [0, 0, 0, 1]
            ]
        },

        transformPoint: \$m, v) -> [
            m[0][0]*v[0] + m[1][0]*v[1] + m[2][0]*v[2] + m[3][0],
            m[0][1]*v[0] + m[1][1]*v[1] + m[2][1]*v[2] + m[3][1],
            m[0][2]*v[0] + m[1][2]*v[1] + m[2][2]*v[2] + m[3][2]
        ]
    }
}

?? === 3D Box Component ===
component Box {
    constructor() {
        this.vertices = [
            [-1,-1,-1], [1,-1,-1], [1,1,-1], [-1,1,-1], // Bottom
            [-1,-1,1], [1,-1,1], [1,1,1], [-1,1,1]     // Top
        ]
        
        this.edges = [
            [0,1],[1,2],[2,3],[3,0], // Bottom face
            [4,5],[5,6],[6,7],[7,4], // Top face
            [0,4],[1,5],[2,6],[3,7]  // Connecting edges
        ]
        
        this.matrix = math.mat4.identity()
        this.rotationSpeed = [0.01, 0.02, 0.005]
    }

    update(dt) {
        ? Apply continuous rotation
        this.matrix = math.mat4.multiply(
            this.matrix,
            math.mat4.rotationX(this.rotationSpeed[0] * dt)
        )
        this.matrix = math.mat4.multiply(
            this.matrix,
            math.mat4.rotationY(this.rotationSpeed[1] * dt)
        )
    }

    render(ctx, canvas) {
        ? Project vertices
        projected = this.vertices.map(v => {
            world = math.mat4.transformPoint(this.matrix, v)
            return this.project(world, canvas)
        })

        ? Draw edges
        ctx.strokeStyle = config.edgeColor
        ctx.lineWidth = 2
        for (edge in this.edges) {
            p1 = projected[edge[0]]
            p2 = projected[edge[1]]
            ctx.beginPath()
            ctx.moveTo(p1.x, p1.y)
            ctx.lineTo(p2.x, p2.y)
            ctx.stroke()
        }
    }

    project(point, canvas) {
        fov = 500
        z = point[2] + 5 ? Camera distance
        factor = fov / z
        return {
            x: point[0] * factor + canvas.width/2,
            y: -point[1] * factor + canvas.height/2 ? Flip Y-axis
        }
    }
}

?? === Main Application ===
app {
    init() {
        ? Create canvas
        canvas = document.createElement('canvas')
        canvas.id = config.canvasID
        canvas.width = window.innerWidth
        canvas.height = window.innerHeight
        document.body.appendChild(canvas)
        
        ? Initialize components
        this.box = new Box()
        this.ctx = canvas.getContext('2d')
        this.lastTime = 0
        
        ? Start animation loop
        this.animate(0)
    }

    animate(time) {
        ? Calculate delta time
        dt = time - this.lastTime
        this.lastTime = time
        
        ? Clear canvas
        this.ctx.fillStyle = `rgb(${config.bgColor[0]*255},${config.bgColor[1]*255},${config.bgColor[2]*255})`
        this.ctx.fillRect(0, 0, canvas.width, canvas.height)
        
        ? Update and render
        this.box.update(dt)
        this.box.render(this.ctx, canvas)
        
        ? Request next frame
        requestAnimationFrame(t => this.animate(t))
    }
}

?? === Execution Entry Point ===
? Start application when DOM is ready
document.addEventListener('DOMContentLoaded', \-> {
    app.init()
})